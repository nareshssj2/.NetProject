#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace LINQ_MODE2
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="emp_db")]
	public partial class My_ProductsDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertProduct(Product instance);
    partial void UpdateProduct(Product instance);
    partial void DeleteProduct(Product instance);
    partial void InsertStateMaster(StateMaster instance);
    partial void UpdateStateMaster(StateMaster instance);
    partial void DeleteStateMaster(StateMaster instance);
    partial void InsertCityMaster(CityMaster instance);
    partial void UpdateCityMaster(CityMaster instance);
    partial void DeleteCityMaster(CityMaster instance);
    partial void InsertCountryMaster(CountryMaster instance);
    partial void UpdateCountryMaster(CountryMaster instance);
    partial void DeleteCountryMaster(CountryMaster instance);
    partial void InsertOrder(Order instance);
    partial void UpdateOrder(Order instance);
    partial void DeleteOrder(Order instance);
    #endregion
		
		public My_ProductsDataContext() : 
				base(global::LINQ_MODE2.Properties.Settings.Default.emp_dbConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public My_ProductsDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public My_ProductsDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public My_ProductsDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public My_ProductsDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Product> Products
		{
			get
			{
				return this.GetTable<Product>();
			}
		}
		
		public System.Data.Linq.Table<StateMaster> StateMasters
		{
			get
			{
				return this.GetTable<StateMaster>();
			}
		}
		
		public System.Data.Linq.Table<CityMaster> CityMasters
		{
			get
			{
				return this.GetTable<CityMaster>();
			}
		}
		
		public System.Data.Linq.Table<CountryMaster> CountryMasters
		{
			get
			{
				return this.GetTable<CountryMaster>();
			}
		}
		
		public System.Data.Linq.Table<Order> Orders
		{
			get
			{
				return this.GetTable<Order>();
			}
		}
		
		public System.Data.Linq.Table<Project> Projects
		{
			get
			{
				return this.GetTable<Project>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Products")]
	public partial class Product : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _ProductID;
		
		private string _ProductName;
		
		private System.Nullable<decimal> _UnitPrice;
		
		private int _LicensesInHand;
		
		private System.Nullable<short> _ReorderLevel;
		
		private EntitySet<Order> _Orders;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnProductIDChanging(string value);
    partial void OnProductIDChanged();
    partial void OnProductNameChanging(string value);
    partial void OnProductNameChanged();
    partial void OnUnitPriceChanging(System.Nullable<decimal> value);
    partial void OnUnitPriceChanged();
    partial void OnLicensesInHandChanging(int value);
    partial void OnLicensesInHandChanged();
    partial void OnReorderLevelChanging(System.Nullable<short> value);
    partial void OnReorderLevelChanged();
    #endregion
		
		public Product()
		{
			this._Orders = new EntitySet<Order>(new Action<Order>(this.attach_Orders), new Action<Order>(this.detach_Orders));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProductID", DbType="Char(10) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string ProductID
		{
			get
			{
				return this._ProductID;
			}
			set
			{
				if ((this._ProductID != value))
				{
					this.OnProductIDChanging(value);
					this.SendPropertyChanging();
					this._ProductID = value;
					this.SendPropertyChanged("ProductID");
					this.OnProductIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProductName", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string ProductName
		{
			get
			{
				return this._ProductName;
			}
			set
			{
				if ((this._ProductName != value))
				{
					this.OnProductNameChanging(value);
					this.SendPropertyChanging();
					this._ProductName = value;
					this.SendPropertyChanged("ProductName");
					this.OnProductNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UnitPrice", DbType="SmallMoney")]
		public System.Nullable<decimal> UnitPrice
		{
			get
			{
				return this._UnitPrice;
			}
			set
			{
				if ((this._UnitPrice != value))
				{
					this.OnUnitPriceChanging(value);
					this.SendPropertyChanging();
					this._UnitPrice = value;
					this.SendPropertyChanged("UnitPrice");
					this.OnUnitPriceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LicensesInHand", DbType="Int NOT NULL")]
		public int LicensesInHand
		{
			get
			{
				return this._LicensesInHand;
			}
			set
			{
				if ((this._LicensesInHand != value))
				{
					this.OnLicensesInHandChanging(value);
					this.SendPropertyChanging();
					this._LicensesInHand = value;
					this.SendPropertyChanged("LicensesInHand");
					this.OnLicensesInHandChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ReorderLevel", DbType="SmallInt")]
		public System.Nullable<short> ReorderLevel
		{
			get
			{
				return this._ReorderLevel;
			}
			set
			{
				if ((this._ReorderLevel != value))
				{
					this.OnReorderLevelChanging(value);
					this.SendPropertyChanging();
					this._ReorderLevel = value;
					this.SendPropertyChanged("ReorderLevel");
					this.OnReorderLevelChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Product_Order", Storage="_Orders", ThisKey="ProductID", OtherKey="ProductID")]
		public EntitySet<Order> Orders
		{
			get
			{
				return this._Orders;
			}
			set
			{
				this._Orders.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Orders(Order entity)
		{
			this.SendPropertyChanging();
			entity.Product = this;
		}
		
		private void detach_Orders(Order entity)
		{
			this.SendPropertyChanging();
			entity.Product = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.StateMaster")]
	public partial class StateMaster : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _StateID;
		
		private string _StateName;
		
		private string _StateDesc;
		
		private string _CountryID;
		
		private EntitySet<CityMaster> _CityMasters;
		
		private EntityRef<CountryMaster> _CountryMaster;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnStateIDChanging(string value);
    partial void OnStateIDChanged();
    partial void OnStateNameChanging(string value);
    partial void OnStateNameChanged();
    partial void OnStateDescChanging(string value);
    partial void OnStateDescChanged();
    partial void OnCountryIDChanging(string value);
    partial void OnCountryIDChanged();
    #endregion
		
		public StateMaster()
		{
			this._CityMasters = new EntitySet<CityMaster>(new Action<CityMaster>(this.attach_CityMasters), new Action<CityMaster>(this.detach_CityMasters));
			this._CountryMaster = default(EntityRef<CountryMaster>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StateID", DbType="Char(10) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string StateID
		{
			get
			{
				return this._StateID;
			}
			set
			{
				if ((this._StateID != value))
				{
					this.OnStateIDChanging(value);
					this.SendPropertyChanging();
					this._StateID = value;
					this.SendPropertyChanged("StateID");
					this.OnStateIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StateName", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string StateName
		{
			get
			{
				return this._StateName;
			}
			set
			{
				if ((this._StateName != value))
				{
					this.OnStateNameChanging(value);
					this.SendPropertyChanging();
					this._StateName = value;
					this.SendPropertyChanged("StateName");
					this.OnStateNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StateDesc", DbType="VarChar(100)")]
		public string StateDesc
		{
			get
			{
				return this._StateDesc;
			}
			set
			{
				if ((this._StateDesc != value))
				{
					this.OnStateDescChanging(value);
					this.SendPropertyChanging();
					this._StateDesc = value;
					this.SendPropertyChanged("StateDesc");
					this.OnStateDescChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CountryID", DbType="Char(10) NOT NULL", CanBeNull=false)]
		public string CountryID
		{
			get
			{
				return this._CountryID;
			}
			set
			{
				if ((this._CountryID != value))
				{
					if (this._CountryMaster.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCountryIDChanging(value);
					this.SendPropertyChanging();
					this._CountryID = value;
					this.SendPropertyChanged("CountryID");
					this.OnCountryIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="StateMaster_CityMaster", Storage="_CityMasters", ThisKey="StateID", OtherKey="StateID")]
		public EntitySet<CityMaster> CityMasters
		{
			get
			{
				return this._CityMasters;
			}
			set
			{
				this._CityMasters.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CountryMaster_StateMaster", Storage="_CountryMaster", ThisKey="CountryID", OtherKey="CountryID", IsForeignKey=true)]
		public CountryMaster CountryMaster
		{
			get
			{
				return this._CountryMaster.Entity;
			}
			set
			{
				CountryMaster previousValue = this._CountryMaster.Entity;
				if (((previousValue != value) 
							|| (this._CountryMaster.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CountryMaster.Entity = null;
						previousValue.StateMasters.Remove(this);
					}
					this._CountryMaster.Entity = value;
					if ((value != null))
					{
						value.StateMasters.Add(this);
						this._CountryID = value.CountryID;
					}
					else
					{
						this._CountryID = default(string);
					}
					this.SendPropertyChanged("CountryMaster");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_CityMasters(CityMaster entity)
		{
			this.SendPropertyChanging();
			entity.StateMaster = this;
		}
		
		private void detach_CityMasters(CityMaster entity)
		{
			this.SendPropertyChanging();
			entity.StateMaster = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.CityMaster")]
	public partial class CityMaster : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _CityID;
		
		private string _CityName;
		
		private string _CityDesc;
		
		private string _StateID;
		
		private EntityRef<StateMaster> _StateMaster;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCityIDChanging(string value);
    partial void OnCityIDChanged();
    partial void OnCityNameChanging(string value);
    partial void OnCityNameChanged();
    partial void OnCityDescChanging(string value);
    partial void OnCityDescChanged();
    partial void OnStateIDChanging(string value);
    partial void OnStateIDChanged();
    #endregion
		
		public CityMaster()
		{
			this._StateMaster = default(EntityRef<StateMaster>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CityID", DbType="Char(10) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string CityID
		{
			get
			{
				return this._CityID;
			}
			set
			{
				if ((this._CityID != value))
				{
					this.OnCityIDChanging(value);
					this.SendPropertyChanging();
					this._CityID = value;
					this.SendPropertyChanged("CityID");
					this.OnCityIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CityName", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string CityName
		{
			get
			{
				return this._CityName;
			}
			set
			{
				if ((this._CityName != value))
				{
					this.OnCityNameChanging(value);
					this.SendPropertyChanging();
					this._CityName = value;
					this.SendPropertyChanged("CityName");
					this.OnCityNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CityDesc", DbType="VarChar(100)")]
		public string CityDesc
		{
			get
			{
				return this._CityDesc;
			}
			set
			{
				if ((this._CityDesc != value))
				{
					this.OnCityDescChanging(value);
					this.SendPropertyChanging();
					this._CityDesc = value;
					this.SendPropertyChanged("CityDesc");
					this.OnCityDescChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StateID", DbType="Char(10) NOT NULL", CanBeNull=false)]
		public string StateID
		{
			get
			{
				return this._StateID;
			}
			set
			{
				if ((this._StateID != value))
				{
					if (this._StateMaster.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnStateIDChanging(value);
					this.SendPropertyChanging();
					this._StateID = value;
					this.SendPropertyChanged("StateID");
					this.OnStateIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="StateMaster_CityMaster", Storage="_StateMaster", ThisKey="StateID", OtherKey="StateID", IsForeignKey=true)]
		public StateMaster StateMaster
		{
			get
			{
				return this._StateMaster.Entity;
			}
			set
			{
				StateMaster previousValue = this._StateMaster.Entity;
				if (((previousValue != value) 
							|| (this._StateMaster.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._StateMaster.Entity = null;
						previousValue.CityMasters.Remove(this);
					}
					this._StateMaster.Entity = value;
					if ((value != null))
					{
						value.CityMasters.Add(this);
						this._StateID = value.StateID;
					}
					else
					{
						this._StateID = default(string);
					}
					this.SendPropertyChanged("StateMaster");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.CountryMaster")]
	public partial class CountryMaster : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _CountryID;
		
		private string _CountryName;
		
		private string _CountryDesc;
		
		private EntitySet<StateMaster> _StateMasters;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCountryIDChanging(string value);
    partial void OnCountryIDChanged();
    partial void OnCountryNameChanging(string value);
    partial void OnCountryNameChanged();
    partial void OnCountryDescChanging(string value);
    partial void OnCountryDescChanged();
    #endregion
		
		public CountryMaster()
		{
			this._StateMasters = new EntitySet<StateMaster>(new Action<StateMaster>(this.attach_StateMasters), new Action<StateMaster>(this.detach_StateMasters));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CountryID", DbType="Char(10) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string CountryID
		{
			get
			{
				return this._CountryID;
			}
			set
			{
				if ((this._CountryID != value))
				{
					this.OnCountryIDChanging(value);
					this.SendPropertyChanging();
					this._CountryID = value;
					this.SendPropertyChanged("CountryID");
					this.OnCountryIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CountryName", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string CountryName
		{
			get
			{
				return this._CountryName;
			}
			set
			{
				if ((this._CountryName != value))
				{
					this.OnCountryNameChanging(value);
					this.SendPropertyChanging();
					this._CountryName = value;
					this.SendPropertyChanged("CountryName");
					this.OnCountryNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CountryDesc", DbType="VarChar(100)")]
		public string CountryDesc
		{
			get
			{
				return this._CountryDesc;
			}
			set
			{
				if ((this._CountryDesc != value))
				{
					this.OnCountryDescChanging(value);
					this.SendPropertyChanging();
					this._CountryDesc = value;
					this.SendPropertyChanged("CountryDesc");
					this.OnCountryDescChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CountryMaster_StateMaster", Storage="_StateMasters", ThisKey="CountryID", OtherKey="CountryID")]
		public EntitySet<StateMaster> StateMasters
		{
			get
			{
				return this._StateMasters;
			}
			set
			{
				this._StateMasters.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_StateMasters(StateMaster entity)
		{
			this.SendPropertyChanging();
			entity.CountryMaster = this;
		}
		
		private void detach_StateMasters(StateMaster entity)
		{
			this.SendPropertyChanging();
			entity.CountryMaster = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Orders")]
	public partial class Order : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _OrderID;
		
		private System.DateTime _OrderDate;
		
		private string _ClientID;
		
		private string _ProductID;
		
		private int _Quantity;
		
		private System.DateTime _ShippingDate;
		
		private EntityRef<Product> _Product;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnOrderIDChanging(int value);
    partial void OnOrderIDChanged();
    partial void OnOrderDateChanging(System.DateTime value);
    partial void OnOrderDateChanged();
    partial void OnClientIDChanging(string value);
    partial void OnClientIDChanged();
    partial void OnProductIDChanging(string value);
    partial void OnProductIDChanged();
    partial void OnQuantityChanging(int value);
    partial void OnQuantityChanged();
    partial void OnShippingDateChanging(System.DateTime value);
    partial void OnShippingDateChanged();
    #endregion
		
		public Order()
		{
			this._Product = default(EntityRef<Product>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OrderID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int OrderID
		{
			get
			{
				return this._OrderID;
			}
			set
			{
				if ((this._OrderID != value))
				{
					this.OnOrderIDChanging(value);
					this.SendPropertyChanging();
					this._OrderID = value;
					this.SendPropertyChanged("OrderID");
					this.OnOrderIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OrderDate", DbType="SmallDateTime NOT NULL")]
		public System.DateTime OrderDate
		{
			get
			{
				return this._OrderDate;
			}
			set
			{
				if ((this._OrderDate != value))
				{
					this.OnOrderDateChanging(value);
					this.SendPropertyChanging();
					this._OrderDate = value;
					this.SendPropertyChanged("OrderDate");
					this.OnOrderDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ClientID", DbType="Char(10) NOT NULL", CanBeNull=false)]
		public string ClientID
		{
			get
			{
				return this._ClientID;
			}
			set
			{
				if ((this._ClientID != value))
				{
					this.OnClientIDChanging(value);
					this.SendPropertyChanging();
					this._ClientID = value;
					this.SendPropertyChanged("ClientID");
					this.OnClientIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProductID", DbType="Char(10) NOT NULL", CanBeNull=false)]
		public string ProductID
		{
			get
			{
				return this._ProductID;
			}
			set
			{
				if ((this._ProductID != value))
				{
					if (this._Product.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnProductIDChanging(value);
					this.SendPropertyChanging();
					this._ProductID = value;
					this.SendPropertyChanged("ProductID");
					this.OnProductIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Quantity", DbType="Int NOT NULL")]
		public int Quantity
		{
			get
			{
				return this._Quantity;
			}
			set
			{
				if ((this._Quantity != value))
				{
					this.OnQuantityChanging(value);
					this.SendPropertyChanging();
					this._Quantity = value;
					this.SendPropertyChanged("Quantity");
					this.OnQuantityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ShippingDate", DbType="SmallDateTime NOT NULL")]
		public System.DateTime ShippingDate
		{
			get
			{
				return this._ShippingDate;
			}
			set
			{
				if ((this._ShippingDate != value))
				{
					this.OnShippingDateChanging(value);
					this.SendPropertyChanging();
					this._ShippingDate = value;
					this.SendPropertyChanged("ShippingDate");
					this.OnShippingDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Product_Order", Storage="_Product", ThisKey="ProductID", OtherKey="ProductID", IsForeignKey=true)]
		public Product Product
		{
			get
			{
				return this._Product.Entity;
			}
			set
			{
				Product previousValue = this._Product.Entity;
				if (((previousValue != value) 
							|| (this._Product.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Product.Entity = null;
						previousValue.Orders.Remove(this);
					}
					this._Product.Entity = value;
					if ((value != null))
					{
						value.Orders.Add(this);
						this._ProductID = value.ProductID;
					}
					else
					{
						this._ProductID = default(string);
					}
					this.SendPropertyChanged("Product");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Projects")]
	public partial class Project
	{
		
		private string _ProjectID;
		
		private string _ProjectName;
		
		public Project()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProjectID", DbType="Char(10)")]
		public string ProjectID
		{
			get
			{
				return this._ProjectID;
			}
			set
			{
				if ((this._ProjectID != value))
				{
					this._ProjectID = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProjectName", DbType="VarChar(50)")]
		public string ProjectName
		{
			get
			{
				return this._ProjectName;
			}
			set
			{
				if ((this._ProjectName != value))
				{
					this._ProjectName = value;
				}
			}
		}
	}
}
#pragma warning restore 1591
